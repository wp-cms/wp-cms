<?php

namespace Core\UserAvatar;

/**
 * Filter the native WP get_avatar() function
 * @param string $avatar
 * @param string|object $id_or_email
 * @param string $size
 * @param string $alt
 * @return string
 */
function get_avatar_filter($avatar, $id_or_email='', $size='', $alt='') {

    // Ignore native $avatar and return our own
    return get_user_avatar($id_or_email, $size, $alt);
}


/**
 * Retrieve the default image src
 * @param string $letter
 * @return string
 */
function default_image($letter = 'A') {

    // Custom Default Avatar
    if(get_option('avatar_default') == 'custom' && !empty(get_option('wpua_default_avatar')) && wp_attachment_is_image(get_option('wpua_default_avatar'))) {

        // Get image source
        $default_image_src = wp_get_attachment_image_src(get_option('wpua_default_avatar'), array(150,150));

        // Image src
        return $default_image_src[0];

    // Use Mystery
    }elseif(get_option('avatar_default') == 'mystery') {

        return includes_url().'images/default-avatar.png';

    }

    // Use autogenerated SVG with First Letter
    return get_svg_letter($letter);

}

function user_by_id_or_email_or_object($id_or_email){

    // Determine if we receive an ID, email, or type of object
    if(is_numeric($id_or_email) ) {
        $user = get_user_by( 'id', absint( $id_or_email ) );
    }elseif(is_string($id_or_email) && is_email( $id_or_email ) ) {
        $user = get_user_by( 'email', $id_or_email);
    }elseif($id_or_email instanceof WP_User) {
        $user = $id_or_email;
    }elseif($id_or_email instanceof WP_Comment) {
        if (!empty($id_or_email->user_id)) {
            $user = get_user_by( 'id', $id_or_email->user_id );
        }
    }

    return empty( $user ) ? false : $user;
}

/**
 * Retrieve user_avatar for a given user id or email
 * @since 1.0
 * @param int|string $id_or_email
 * @return bool
 */
function get_user_avatar_meta($id_or_email='') {

    $user = user_by_id_or_email_or_object($id_or_email);

    // Return false if no user found
    if(!$user) {
        return false;
    }

    // Get the custom avatar if set
    $custom_avatar = get_user_meta($user->ID, 'user_avatar', true);

    // Return whether a custom avatar is set
    return !empty($custom_avatar) ? $custom_avatar : false;

}


/**
 * Check if user has an avatar set with this plugin
 * @since 1.0
 * @param int|string $id_or_email
 * @return bool
 */
function has_wp_user_avatar($id_or_email='') {

    $custom_avatar = get_user_avatar_meta($id_or_email);

    // Return whether a custom avatar is set
    return !empty($custom_avatar);

}

/**
 * Get the user avatar or return the default one
 * @param string $id_or_email
 * @param string $size
 * @param string $align
 * @param string $alt
 * @return mixed|void
 */
function get_user_avatar($id_or_email='', $size='96', $align='', $alt='') {

    $custom_avatar = get_user_avatar_meta($id_or_email);

    // Create alignment class
    $alignclass = !empty($align) && ($align == 'left' || $align == 'right' || $align == 'center') ? ' align'.$align : ' alignnone';

    if(!empty($custom_avatar) && wp_attachment_is_image($custom_avatar)) {

        // Numeric size use size array
        $get_size = is_numeric($size) ? array($size,$size) : $size;

        // Get image src
        $image_data = wp_get_attachment_image_src($custom_avatar, $get_size);
        $image_src = $image_data[0];


    } else {

        $user = user_by_id_or_email_or_object($id_or_email);
        $image_src = default_image(strtoupper(mb_substr($user->display_name, 0, 1, "UTF-8")));

    }

    // Construct the img tag
    $avatar = '<img src="' . $image_src . '" width="'.$size.'px" height="'.$size.'px" alt="'.$alt.'" class="avatar avatar-'.$size.' wp-user-avatar wp-user-avatar-' . $size . $alignclass . ' photo" />';

    /**
     * Filter get_user_avatar
     * @since 1.9
     * @param string $avatar
     * @param int|string $id_or_email
     * @param int|string $size
     * @param string $align
     * @param string $alt
     */
    return apply_filters('get_user_avatar', $avatar, $id_or_email, $size, $align, $alt);
}

function get_svg_letter($letter){

    // Generate svg if it doesn't exist
    if(!file_exists(plugin_dir_path( __DIR__ ).'img/letters/'.md5($letter).'.svg')){
        generate_svg_letter($letter);
    }

    return plugin_dir_url( __DIR__ ).'img/letters/'.md5($letter).'.svg';
}

function generate_svg_letter($letter) {

    // Pick a dark color at random for the background
    $colors = ["#E284B3", "#FFD900", "#681313", "#D6293A", "#735372", "#009975", "#FFBD39", "#FF0000", "#52437B", "#F76262", "#216583", "#293462", "#DD9D52", "#936B93", "#6DD38D", "#888888", "#6F8190", "#A27BEA", "#128762", "#96C2ED", "#3593CE", "#5EE2CD", "#96366E", "#E38080", "#FF3300", "#FFB366", "#0000FF", "#000099", "#000033"];

    $colors = apply_filters('wpua_avatar_backgrounds', $colors);

    $random_color_key = array_rand($colors, 1);
    $background = $colors[$random_color_key];

    $svg = '<?xml version="1.0" encoding="UTF-8"?><svg style="font-weight:bold;" width="150px" height="150px" xmlns="http://www.w3.org/2000/svg"><defs><style type="text/css">@font-face {font-family: "Arial";font-weight: normal;font-style: normal;}</style></defs><rect x="0" y="0" width="500" height="500" style="fill:' . $background . '"/><text x="50%" y="50%" dy=".1em" fill="#eee" text-anchor="middle" dominant-baseline="middle" style="font-family: Arial, sans-serif; font-size:72px; line-height: 1">' . $letter . '</text></svg>';

    file_put_contents(plugin_dir_path( __DIR__ ).'img/letters/'.md5($letter).'.svg', $svg);

}